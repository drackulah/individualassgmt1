#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/wait.h>

#define NUM_CHILDREN 3 // number of child processes

int pipes[NUM_CHILDREN][2]; // array of pipes to communicate with each child process
void parent_interrupt_handler(int sig) {
    printf("\nParent process interrupted.\n");
    exit(0);
}
void child_interrupt_handler(int sig) {
    printf("\nChild process interrupted.\n");
    exit(0);
}
void child_process(int child_num) {
    char buffer[256];
    close(pipes[child_num][1]); // close write end of pipe
    while(1) {
        read(pipes[child_num][0], buffer, sizeof(buffer)); // read message from parent
        printf("Child %d received message: %s\n", child_num, buffer);
    }
}
int main() {
    signal(SIGINT, parent_interrupt_handler); // set parent interrupt handler
    for(int i = 0; i < NUM_CHILDREN; i++) {
        if(pipe(pipes[i]) < 0) { 
            perror("p error");
            exit(1);
        }
        pid_t pid = fork();
        if(pid < 0) { // fork failed
            perror("fork error");
            exit(1);
        } else if(pid == 0) { // child process
            signal(SIGINT, child_interrupt_handler); 
            child_process(i);
            exit(0);
        }
    }
    close(pipes[0][0]); // close read end of first pipe
    while(1) {
        printf("Enter a message: ");
        char message[256];
        fgets(message, sizeof(message), stdin); 
        if(message[strlen(message)-1] == '\n') { 
            message[strlen(message)-1] = '\0';
        }
        for(int i = 0; i < NUM_CHILDREN; i++) {
            write(pipes[i][1], message, strlen(message)+1);
        }
    }
    return 0;
}
